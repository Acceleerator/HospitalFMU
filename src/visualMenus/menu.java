/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package visualMenus;

import visualFormularios.cadFuncionario;
import visualFormularios.cadPaciente;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import classes.dadosDAO;
import classes.funcionario;
import classes.paciente;
import java.awt.event.KeyEvent;
import java.net.URL;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;



/**
 *
 * @author Kino
 */
public class menu extends javax.swing.JFrame {

    /**
     * Creates new form Principal
     * @throws java.sql.SQLException
     */
    URL iconURL = getClass().getResource("/img/HospitalFMU.png");
    ImageIcon icon = new ImageIcon(iconURL);
    public menu() throws SQLException {
        initComponents();
        atualizarTabelaFunc();
        atualizarTabelaPac();
        this.setExtendedState(menu.MAXIMIZED_BOTH);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        GrupoBtnFunc = new javax.swing.ButtonGroup();
        GrupoBtnPac = new javax.swing.ButtonGroup();
        painelGuia = new javax.swing.JTabbedPane();
        abaMenu = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        tituloGripe = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        imagemGripe = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        textoGripeLbl1 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel43 = new javax.swing.JLabel();
        jLabel44 = new javax.swing.JLabel();
        jLabel45 = new javax.swing.JLabel();
        jLabel46 = new javax.swing.JLabel();
        jLabel47 = new javax.swing.JLabel();
        jLabel48 = new javax.swing.JLabel();
        jLabel49 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        jLabel37 = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        jLabel40 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        jLabel42 = new javax.swing.JLabel();
        abaFunc = new javax.swing.JPanel();
        nomeFuncLabel = new javax.swing.JLabel();
        funcField = new javax.swing.JTextField();
        pesquisarFunc = new javax.swing.JButton();
        cadastrarFuncBtn = new javax.swing.JButton();
        nomeBtnFunc = new javax.swing.JRadioButton();
        cpfBtnFunc = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaFunc = new javax.swing.JTable();
        atualizarFuncBtn = new javax.swing.JButton();
        idBtnFunc = new javax.swing.JRadioButton();
        atualizarTabelaFunc = new javax.swing.JButton();
        abaPac = new javax.swing.JPanel();
        nomeBtnPac = new javax.swing.JRadioButton();
        cpfBtnPac = new javax.swing.JRadioButton();
        nomePacLabel = new javax.swing.JLabel();
        pacField = new javax.swing.JTextField();
        pesquisarPac = new javax.swing.JButton();
        cadastrarPac = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabelaPac = new javax.swing.JTable();
        atualizarPac = new javax.swing.JButton();
        idBtnPac = new javax.swing.JRadioButton();
        atualizarTabelaPaciente = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        nomeLogin = new javax.swing.JLabel();
        cpfLogin = new javax.swing.JLabel();
        cargoLogin = new javax.swing.JLabel();
        nomeLbl = new javax.swing.JLabel();
        cpfLbl = new javax.swing.JLabel();
        cargoLbl = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        usuarioMenu = new javax.swing.JMenu();
        configBtn = new javax.swing.JMenuItem();
        deslogarBtn = new javax.swing.JMenuItem();
        sairBtn = new javax.swing.JMenuItem();
        sobreBtn = new javax.swing.JMenu();
        sobreMenu = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("HospitalFMU - Início");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setIconImage(icon.getImage());

        painelGuia.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        abaMenu.setBackground(new java.awt.Color(102, 102, 102));

        tituloGripe.setFont(new java.awt.Font("Dialog", 1, 70)); // NOI18N
        tituloGripe.setText("Gripe H1N1:");

        jLabel15.setText("composição é definida pela Organização Mundial da Saúde. O médico infectologista Arlindo Schiesari Júnior ressalta que os paci-");

        jLabel16.setText("entes que foram imunizados com a vacina contra a H1N1 de 2015 durante o início da campanha emergencial precisarão ser reva-");

        jLabel17.setText("cinados. \"Quem tomou a vacina de 2015, tem que tomar a vacina de 2016, mas é preciso respeitar um intervalo de 30 dias entre");

        jLabel18.setText("as doses\", explica. É importante destacar que a vacina contra a gripe H1N1 só não pode ser aplicada em pacientes alérgicos à");

        jLabel19.setText("proteína  do  ovo. Schiesari  Júnior  alerta  que  a  vacina  não  faz  a  pessoa  ficar  gripada. \"A vacina não tem vírus vivo, ela tem");

        jLabel20.setText("fragmentos de vírus e, por isso, não tem como causar a doença. A reação vacinal pode causar febre baixa e dor no local da apli-");

        jLabel21.setText("cação da vacina. Mas em dois dias eses sintomas desaparecem\", comenta.");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel15)
                    .addComponent(jLabel16)
                    .addComponent(jLabel17)
                    .addComponent(jLabel18)
                    .addComponent(jLabel19)
                    .addComponent(jLabel20)
                    .addComponent(jLabel21)))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel16)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel17)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel18)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel19)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel20)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel21))
        );

        imagemGripe.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/imagemJornal.jpg"))); // NOI18N

        textoGripeLbl1.setText("          Atualmente, a população de todo o");

        jLabel1.setText("País está em alerta contra a gripe H1N1,");

        jLabel2.setText("também  conhecida  como  Influenza  A.");

        jLabel3.setText("Idosos,  doentes  crônicos,  gestantes  e");

        jLabel4.setText("crianças de 6 meses a 5 anos devem se");

        jLabel5.setText("vacinar. O  primeiro  grupo  imunizado  é");

        jLabel6.setText("composto  por  profissionais  da área da");

        jLabel7.setText("saúde. 67 cidades da região noroeste do");

        jLabel8.setText("Estado de São Paulo, se anteciparam e");

        jLabel9.setText("promoveram uma campanha emergen-");

        jLabel10.setText("cial de vacinação contra a gripe. Porém,");

        jLabel11.setText("foram  utilizadas  doses  da  vacina  de");

        jLabel12.setText("2015. A  vacina  da  gripe  é  atualizada ");

        jLabel13.setText("todos   os   anos   para   adequá-la  aos");

        jLabel14.setText("vírus   circulantes   na   estação   e  sua");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11)
                    .addComponent(jLabel12)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jLabel14, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 224, Short.MAX_VALUE)
                        .addComponent(jLabel13, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(textoGripeLbl1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(textoGripeLbl1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel14)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tituloGripe)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(imagemGripe)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tituloGripe, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(imagemGripe, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4.setBackground(new java.awt.Color(102, 102, 102));

        jLabel22.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Fungo.png"))); // NOI18N
        jLabel22.setText(" ");

        jLabel23.setFont(new java.awt.Font("Dialog", 1, 48)); // NOI18N
        jLabel23.setForeground(new java.awt.Color(0, 0, 0));
        jLabel23.setText(" Novo fungo");

        jPanel5.setBackground(new java.awt.Color(102, 102, 102));

        jLabel43.setText("tectado recentemente, entrou na lista de “ameaças urgentes” após um paciente morrer no hos-");

        jLabel44.setText("pital Mount Sinai. Ainda não há casos relatados no Brasil, mas como o país não conta com um");

        jLabel45.setText("sistema de vigilância de fungos, existe  a possibilidade de ele estar  circulando  sem  ninguém");

        jLabel46.setText("saber. Após a preocupação  generalizada dessa  ausência  de  fiscalização, o  secretário  de");

        jLabel47.setText("Vigilância em Saúde, Wanderson Kleber de Oliveira, anunciou na quarta-feira que um sistema");

        jLabel48.setText("de vigilância contra fungos está sendo criado pelo Ministério da Saúde. Segundo ele, a questão");

        jLabel49.setText("tem sido discutida nacionalmente há cerca de três anos.");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel43)
                    .addComponent(jLabel44)
                    .addComponent(jLabel45)
                    .addComponent(jLabel46)
                    .addComponent(jLabel47)
                    .addComponent(jLabel48)
                    .addComponent(jLabel49))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel43)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel44)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel45)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel46)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel47)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel48)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel49)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel6.setBackground(new java.awt.Color(102, 102, 102));
        jPanel6.setForeground(new java.awt.Color(0, 0, 0));

        jLabel24.setText("          O fungo Candida auris, desco-");

        jLabel25.setText("berto recentemente, tem se espa-");

        jLabel26.setText("lhado pelo mundo e preocupa espe-");

        jLabel27.setText("cialistas. Segund informações do");

        jLabel28.setText("jornal  americano  The  New  York");

        jLabel29.setText("Times, ele infecta pessoas com o");

        jLabel30.setText("sistema imunológico enfraquecido");

        jLabel31.setText("e pacientes internados em hospi-");

        jLabel32.setText("tais, se instala rapidamente nos lu-");

        jLabel33.setText("gares mais inusitados e, para pio-");

        jLabel34.setText("rar,  resiste  aos  principais  trata-");

        jLabel35.setText("mentos antifúngicos.");

        jLabel36.setText("          Nos últimos anos, casos foram");

        jLabel37.setText("identificados em mais de 30 países,");

        jLabel38.setText("em todos os continentes. Alguns de-");

        jLabel39.setText("les se espantam. Na Venezuela, por");

        jLabel40.setText("exemplo, ele atingiu uma UTI neona-");

        jLabel41.setText("tal. Na Espanha, varreu um hospital");

        jLabel42.setText("e nos Estados  Unidos, onde  foi  de-");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel25)
                    .addComponent(jLabel26)
                    .addComponent(jLabel27)
                    .addComponent(jLabel28)
                    .addComponent(jLabel31)
                    .addComponent(jLabel32)
                    .addComponent(jLabel33)
                    .addComponent(jLabel34)
                    .addComponent(jLabel35)
                    .addComponent(jLabel24, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel30, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel29, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(29, 29, 29))
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel36)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel37)
                    .addComponent(jLabel38)
                    .addComponent(jLabel39)
                    .addComponent(jLabel40)
                    .addComponent(jLabel41)
                    .addComponent(jLabel42))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel24)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel25)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel26)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel27)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel28)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel29)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel30)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel31)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel32)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel33)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel34)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel35)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel36)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel37)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel38)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel39)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel40)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel41)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel42)
                .addContainerGap(8, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel23))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel23)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(58, 58, 58))
        );

        javax.swing.GroupLayout abaMenuLayout = new javax.swing.GroupLayout(abaMenu);
        abaMenu.setLayout(abaMenuLayout);
        abaMenuLayout.setHorizontalGroup(
            abaMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(abaMenuLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        abaMenuLayout.setVerticalGroup(
            abaMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(abaMenuLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(abaMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 626, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        painelGuia.addTab("Jornal HospitalFMU", abaMenu);

        abaFunc.setPreferredSize(new java.awt.Dimension(580, 0));

        nomeFuncLabel.setText("Nome do funcionário:");

        funcField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                funcFieldKeyPressed(evt);
            }
        });

        pesquisarFunc.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/pesquisar.png"))); // NOI18N
        pesquisarFunc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pesquisarFuncActionPerformed(evt);
            }
        });

        cadastrarFuncBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Adicionar.png"))); // NOI18N
        cadastrarFuncBtn.setText("Cadastrar");
        cadastrarFuncBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cadastrarFuncBtnActionPerformed(evt);
            }
        });

        GrupoBtnFunc.add(nomeBtnFunc);
        nomeBtnFunc.setSelected(true);
        nomeBtnFunc.setText("Nome");

        GrupoBtnFunc.add(cpfBtnFunc);
        cpfBtnFunc.setText("CPF");

        tabelaFunc.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nome", "CPF", "Data de nascimento", "Sexo", "Telefone fixo", "Ramal", "Celular", "CEP", "Cargo", "Turno", "Salário"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaFunc.setMaximumSize(new java.awt.Dimension(0, 0));
        jScrollPane1.setViewportView(tabelaFunc);

        atualizarFuncBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/editar.png"))); // NOI18N
        atualizarFuncBtn.setText("Atualizar");
        atualizarFuncBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                atualizarFuncBtnActionPerformed(evt);
            }
        });

        GrupoBtnFunc.add(idBtnFunc);
        idBtnFunc.setText("ID");

        atualizarTabelaFunc.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/atualizar.png"))); // NOI18N
        atualizarTabelaFunc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                atualizarTabelaFuncActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout abaFuncLayout = new javax.swing.GroupLayout(abaFunc);
        abaFunc.setLayout(abaFuncLayout);
        abaFuncLayout.setHorizontalGroup(
            abaFuncLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(abaFuncLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(abaFuncLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(abaFuncLayout.createSequentialGroup()
                        .addComponent(cadastrarFuncBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(atualizarFuncBtn)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(abaFuncLayout.createSequentialGroup()
                        .addComponent(nomeFuncLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(funcField, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pesquisarFunc)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nomeBtnFunc)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cpfBtnFunc)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(idBtnFunc)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 772, Short.MAX_VALUE)
                        .addComponent(atualizarTabelaFunc))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        abaFuncLayout.setVerticalGroup(
            abaFuncLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, abaFuncLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(abaFuncLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pesquisarFunc, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(abaFuncLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(nomeFuncLabel)
                        .addComponent(funcField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(nomeBtnFunc)
                        .addComponent(cpfBtnFunc)
                        .addComponent(idBtnFunc)
                        .addComponent(atualizarTabelaFunc)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 522, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(abaFuncLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cadastrarFuncBtn)
                    .addComponent(atualizarFuncBtn))
                .addContainerGap())
        );

        painelGuia.addTab("Funcionários", abaFunc);

        GrupoBtnPac.add(nomeBtnPac);
        nomeBtnPac.setSelected(true);
        nomeBtnPac.setText("Nome");

        GrupoBtnPac.add(cpfBtnPac);
        cpfBtnPac.setText("CPF");

        nomePacLabel.setText("Nome do paciente:");

        pacField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                pacFieldKeyPressed(evt);
            }
        });

        pesquisarPac.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/pesquisar.png"))); // NOI18N
        pesquisarPac.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pesquisarPacActionPerformed(evt);
            }
        });

        cadastrarPac.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Adicionar.png"))); // NOI18N
        cadastrarPac.setText("Cadastrar");
        cadastrarPac.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cadastrarPacActionPerformed(evt);
            }
        });

        tabelaPac.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nome", "CPF", "Data de nascimento", "Sexo", "Telefone fixo", "Celular", "CEP", "Plano de saúde"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaPac.setColumnSelectionAllowed(true);
        jScrollPane2.setViewportView(tabelaPac);

        atualizarPac.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/editar.png"))); // NOI18N
        atualizarPac.setText("Atualizar");
        atualizarPac.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                atualizarPacActionPerformed(evt);
            }
        });

        GrupoBtnPac.add(idBtnPac);
        idBtnPac.setText("ID");

        atualizarTabelaPaciente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/atualizar.png"))); // NOI18N
        atualizarTabelaPaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                atualizarTabelaPacienteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout abaPacLayout = new javax.swing.GroupLayout(abaPac);
        abaPac.setLayout(abaPacLayout);
        abaPacLayout.setHorizontalGroup(
            abaPacLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(abaPacLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(abaPacLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(abaPacLayout.createSequentialGroup()
                        .addComponent(cadastrarPac)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(atualizarPac)
                        .addGap(0, 1248, Short.MAX_VALUE))
                    .addGroup(abaPacLayout.createSequentialGroup()
                        .addComponent(nomePacLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pacField, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pesquisarPac)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nomeBtnPac)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cpfBtnPac)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(idBtnPac)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(atualizarTabelaPaciente)))
                .addContainerGap())
        );
        abaPacLayout.setVerticalGroup(
            abaPacLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, abaPacLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(abaPacLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nomePacLabel)
                    .addComponent(pacField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pesquisarPac)
                    .addComponent(nomeBtnPac)
                    .addComponent(cpfBtnPac)
                    .addComponent(idBtnPac)
                    .addComponent(atualizarTabelaPaciente))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 522, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(abaPacLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cadastrarPac)
                    .addComponent(atualizarPac))
                .addContainerGap())
        );

        painelGuia.addTab("Pacientes", abaPac);

        nomeLogin.setText("Nome:");

        cpfLogin.setText("CPF:");

        cargoLogin.setText("Cargo:");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(nomeLogin)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(nomeLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cpfLogin)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cpfLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cargoLogin)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cargoLbl, javax.swing.GroupLayout.DEFAULT_SIZE, 389, Short.MAX_VALUE)
                .addGap(81, 81, 81))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cargoLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cpfLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(nomeLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(nomeLogin)
                        .addComponent(cpfLogin)
                        .addComponent(cargoLogin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        usuarioMenu.setText("Usuário");

        configBtn.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        configBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/config.png"))); // NOI18N
        configBtn.setText("Configurações");
        configBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                configBtnActionPerformed(evt);
            }
        });
        usuarioMenu.add(configBtn);

        deslogarBtn.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        deslogarBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/logout.png"))); // NOI18N
        deslogarBtn.setText("Deslogar");
        deslogarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deslogarBtnActionPerformed(evt);
            }
        });
        usuarioMenu.add(deslogarBtn);

        sairBtn.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_W, java.awt.event.InputEvent.CTRL_MASK));
        sairBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/sair.png"))); // NOI18N
        sairBtn.setText("Sair");
        sairBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sairBtnActionPerformed(evt);
            }
        });
        usuarioMenu.add(sairBtn);

        jMenuBar1.add(usuarioMenu);

        sobreBtn.setText("Sobre");

        sobreMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        sobreMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/HospitalFMU.png"))); // NOI18N
        sobreMenu.setText("O HospitalFMU");
        sobreMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sobreMenuActionPerformed(evt);
            }
        });
        sobreBtn.add(sobreMenu);

        jMenuBar1.add(sobreBtn);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(painelGuia)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(painelGuia, javax.swing.GroupLayout.PREFERRED_SIZE, 642, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void atualizarPacActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_atualizarPacActionPerformed
        // TODO add your handling code here:
        atualizarDadoPac();
    }//GEN-LAST:event_atualizarPacActionPerformed

    private void cadastrarPacActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cadastrarPacActionPerformed
        // TODO add your handling code here:
        cadPaciente cadP = new cadPaciente();
        cadP.setVisible(true);
    }//GEN-LAST:event_cadastrarPacActionPerformed

    private void pesquisarPacActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pesquisarPacActionPerformed
        // TODO add your handling code here:
        if (!pacField.equals("")){
            try {
                atualizarTabelaPac();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "Erro ao pesquisar: " + ex, "Aviso", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }//GEN-LAST:event_pesquisarPacActionPerformed

    private void configBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_configBtnActionPerformed
        try {
            // TODO add your handling code here:
            config config = new config();
            config.setVisible(true);
        } catch (SQLException ex) {
            Logger.getLogger(menu.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_configBtnActionPerformed

    private void atualizarFuncBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_atualizarFuncBtnActionPerformed
        // TODO add your handling code here:
        atualizarDadoFunc();
    }//GEN-LAST:event_atualizarFuncBtnActionPerformed

    private void cadastrarFuncBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cadastrarFuncBtnActionPerformed
        // TODO add your handling code here:
        cadFuncionario cadF = new cadFuncionario();
        cadF.setVisible(true);
    }//GEN-LAST:event_cadastrarFuncBtnActionPerformed

    private void pesquisarFuncActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pesquisarFuncActionPerformed
        // TODO add your handling code here:
        if (!funcField.equals("")){
            try {
                atualizarTabelaFunc();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "Erro ao pesquisar: " + ex, "Aviso", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }//GEN-LAST:event_pesquisarFuncActionPerformed

    private void atualizarTabelaPacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_atualizarTabelaPacienteActionPerformed
        // TODO add your handling code here:
        try {
            atualizarTabelaPac();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Erro ao pesquisar: " + ex, "Aviso", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_atualizarTabelaPacienteActionPerformed

    private void atualizarTabelaFuncActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_atualizarTabelaFuncActionPerformed
        // TODO add your handling code here:
        try {
            atualizarTabelaFunc();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Erro ao pesquisar: " + ex, "Aviso", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_atualizarTabelaFuncActionPerformed

    private void deslogarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deslogarBtnActionPerformed
        // TODO add your handling code here:
        this.dispose();
        login telaLogin = new login();
        telaLogin.setVisible(true);
    }//GEN-LAST:event_deslogarBtnActionPerformed

    private void sairBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sairBtnActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_sairBtnActionPerformed

    private void funcFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_funcFieldKeyPressed
        // TODO add your handling code here:
        if(enterKey(evt)){
            pesquisarFunc.doClick();
        }
    }//GEN-LAST:event_funcFieldKeyPressed

    private void pacFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pacFieldKeyPressed
        // TODO add your handling code here:
        if(enterKey(evt)){
            pesquisarPac.doClick();
        }
    }//GEN-LAST:event_pacFieldKeyPressed

    private void sobreMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sobreMenuActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(null, "Software desenvolvido por:"
                + "\nEric Yuki Yasuda Kinoshita"
                + "\nLarissa Moriyama Umezo"
                + "\nLucas Najaime"
                + "\n\nHospitalFMU - FMU, Ciências da Computação - Turno Noite ©",
                "Sobre", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_sobreMenuActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new menu().setVisible(true);
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Erro ao atualizar as tabelas.", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup GrupoBtnFunc;
    private javax.swing.ButtonGroup GrupoBtnPac;
    private javax.swing.JPanel abaFunc;
    private javax.swing.JPanel abaMenu;
    private javax.swing.JPanel abaPac;
    private javax.swing.JButton atualizarFuncBtn;
    private javax.swing.JButton atualizarPac;
    private javax.swing.JButton atualizarTabelaFunc;
    private javax.swing.JButton atualizarTabelaPaciente;
    private javax.swing.JButton cadastrarFuncBtn;
    private javax.swing.JButton cadastrarPac;
    public javax.swing.JLabel cargoLbl;
    private javax.swing.JLabel cargoLogin;
    private javax.swing.JMenuItem configBtn;
    private javax.swing.JRadioButton cpfBtnFunc;
    private javax.swing.JRadioButton cpfBtnPac;
    public javax.swing.JLabel cpfLbl;
    private javax.swing.JLabel cpfLogin;
    private javax.swing.JMenuItem deslogarBtn;
    private javax.swing.JTextField funcField;
    private javax.swing.JRadioButton idBtnFunc;
    private javax.swing.JRadioButton idBtnPac;
    private javax.swing.JLabel imagemGripe;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JRadioButton nomeBtnFunc;
    private javax.swing.JRadioButton nomeBtnPac;
    private javax.swing.JLabel nomeFuncLabel;
    public javax.swing.JLabel nomeLbl;
    private javax.swing.JLabel nomeLogin;
    private javax.swing.JLabel nomePacLabel;
    private javax.swing.JTextField pacField;
    private javax.swing.JTabbedPane painelGuia;
    private javax.swing.JButton pesquisarFunc;
    private javax.swing.JButton pesquisarPac;
    private javax.swing.JMenuItem sairBtn;
    private javax.swing.JMenu sobreBtn;
    private javax.swing.JMenuItem sobreMenu;
    private javax.swing.JTable tabelaFunc;
    private javax.swing.JTable tabelaPac;
    private javax.swing.JLabel textoGripeLbl1;
    private javax.swing.JLabel tituloGripe;
    private javax.swing.JMenu usuarioMenu;
    // End of variables declaration//GEN-END:variables

    public void atualizarTabelaFunc() throws SQLException {
        DefaultTableModel model = (DefaultTableModel) tabelaFunc.getModel();
        model.setNumRows(0);
        dadosDAO dados = new dadosDAO();
        String pesquisa = funcField.getText().toUpperCase();
        for (funcionario func : dados.readFuncionarios()){
            if (!funcField.getText().equals("")){
                if (nomeBtnFunc.isSelected()){
                    if (func.getNome().contains(pesquisa)){
                        model.addRow(new Object[]{
                            func.getId_func(),
                            nomeProprio(func.getNome()),
                            func.getCpf(),
                            func.getDt_nascimento(),
                            func.getSexo(),
                            func.getTelfix(),
                            func.getRamal(),
                            func.getTelcel(),
                            func.getCep(),
                            func.getCargo(),
                            func.getTurno(),
                            func.getSalario()
                        });
                    }
                } else if (cpfBtnFunc.isSelected()){
                    if (funcField.getText().equals(func.getCpf())) {
                        model.addRow(new Object[]{
                            func.getId_func(),
                            nomeProprio(func.getNome()),
                            func.getCpf(),
                            func.getDt_nascimento(),
                            func.getSexo(),
                            func.getTelfix(),
                            func.getRamal(),
                            func.getTelcel(),
                            func.getCep(),
                            func.getCargo(),
                            func.getTurno(),
                            func.getSalario()
                        });
                    }
                } else {
                    if (funcField.getText().equals(String.valueOf(func.getId_func()))){
                        model.addRow(new Object[]{
                            func.getId_func(),
                            nomeProprio(func.getNome()),
                            func.getCpf(),
                            func.getDt_nascimento(),
                            func.getSexo(),
                            func.getTelfix(),
                            func.getRamal(),
                            func.getTelcel(),
                            func.getCep(),
                            func.getCargo(),
                            func.getTurno(),
                            func.getSalario()
                        });
                    }
                }
            } else {
                model.addRow(new Object[]{
                    func.getId_func(),
                    nomeProprio(func.getNome()),
                    func.getCpf(),
                    func.getDt_nascimento(),
                    func.getSexo(),
                    func.getTelfix(),
                    func.getRamal(),
                    func.getTelcel(),
                    func.getCep(),
                    func.getCargo(),
                    func.getTurno(),
                    func.getSalario()
                });
            }
        }
    }
    
    public void atualizarTabelaPac() throws SQLException {
        DefaultTableModel model = (DefaultTableModel) tabelaPac.getModel();
        model.setNumRows(0);
        dadosDAO dados = new dadosDAO();
        String pesquisa = pacField.getText().toUpperCase();
        for (paciente pac : dados.readPacientes()){
            if (!pacField.getText().equals("")){
                if (nomeBtnPac.isSelected()){
                    if (pac.getNome().contains(pesquisa)){
                        model.addRow(new Object[]{
                            pac.getId_pac(),
                            nomeProprio(pac.getNome()),
                            pac.getCpf(),
                            pac.getDt_nascimento(),
                            pac.getSexo(),
                            pac.getTelfix(),
                            pac.getTelcel(),
                            pac.getCep(),
                            pac.getPlano_saude()
                        });
                    }
                } else if (cpfBtnPac.isSelected()){
                    if (pacField.getText().equals(pac.getCpf())) {
                        model.addRow(new Object[]{
                            pac.getId_pac(),
                            nomeProprio(pac.getNome()),
                            pac.getCpf(),
                            pac.getDt_nascimento(),
                            pac.getSexo(),
                            pac.getTelfix(),
                            pac.getTelcel(),
                            pac.getCep(),
                            pac.getPlano_saude()
                        });
                    }
                } else {
                    if (pacField.getText().equals(String.valueOf(pac.getId_pac()))){
                        model.addRow(new Object[]{
                            pac.getId_pac(),
                            nomeProprio(pac.getNome()),
                            pac.getCpf(),
                            pac.getDt_nascimento(),
                            pac.getSexo(),
                            pac.getTelfix(),
                            pac.getTelcel(),
                            pac.getCep(),
                            pac.getPlano_saude()
                        });
                    }
                }
            } else {
                model.addRow(new Object[]{
                    pac.getId_pac(),
                    nomeProprio(pac.getNome()),
                    pac.getCpf(),
                    pac.getDt_nascimento(),
                    pac.getSexo(),
                    pac.getTelfix(),
                    pac.getTelcel(),
                    pac.getCep(),
                    pac.getPlano_saude()
                });
            }
        }
    }
    
    public String nomeProprio(String nome){
        char[] letras = nome.toLowerCase().toCharArray();
        boolean inicial = true;
        for (int i = 0; i < letras.length; i++){
            if (inicial && Character.isLetter(letras[i])){
                letras[i] = Character.toUpperCase(letras[i]);
                inicial = false;
            } else if (Character.isWhitespace(letras[i])) {
                inicial = true;
            }
        }
        return String.valueOf(letras);
    }

    private void atualizarDadoPac() {
        String id_pesquisa = null;
        try {
            id_pesquisa = String.valueOf(tabelaPac.getValueAt(tabelaPac.getSelectedRow(), 0));
        } catch (ArrayIndexOutOfBoundsException ex) {
            JOptionPane.showMessageDialog(null, "Selecione o campo para atualizar!", "Aviso", JOptionPane.INFORMATION_MESSAGE);
        }
        int tipoColuna = tabelaPac.getSelectedColumn();
        int opt;
        String[] sexoOpt = {"Feminino", "Masculino", "Outros", "Cancelar"};
        String[] planoOp = {"Alliaz", "Amil", "Porto Seguro", "SulAmérica", "Unimed", "Não possui", "Cancelar"};
        String attDado = null;
        boolean sucesso = false;
        boolean repeat = true;
        boolean dadoCorreto = true;
        String aux;
        // 0 = ID
        // 1 = Nome
        // 2 = CPF
        // 3 = Data de nascimento
        // 4 = Sexo
        // 5 = Telefone fixo
        // 6 = Celular
        // 7 = CEP
        // 8 = Plano de saúde
        dadosDAO dados = new dadosDAO();
        switch (tipoColuna) {
            case 0:
                JOptionPane.showMessageDialog(null, "O ID não pode ser alterado!", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                break;
            case 1: // 1 = Nome
                while (repeat){
                    try {
                        attDado = JOptionPane.showInputDialog(null, "Insira o novo nome para atualizar:", "Atualizar nome do paciente", JOptionPane.INFORMATION_MESSAGE);
                        for (int i = 0; i < attDado.length(); i++){
                            aux = String.valueOf(attDado.charAt(i));
                            if (isNumeric(aux)) {
                                dadoCorreto = false;
                                JOptionPane.showMessageDialog(null, "Sintaxe de nome inválida!\nPor favor, utilize somente letras.", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                                break;
                            }
                        }
                        if (!attDado.isEmpty() && dadoCorreto){
                            attDado = attDado.toUpperCase();
                            if (dados.updateDadoPaciente(attDado, tipoColuna, Integer.parseInt(id_pesquisa))){
                                sucesso = true;
                                repeat = false;
                            }
                        }
                    } catch (SQLException ex) {
                        JOptionPane.showMessageDialog(null, "Erro ao consultar banco de dados: " + ex, "Aviso", JOptionPane.INFORMATION_MESSAGE);
                    } catch (NullPointerException ex) {
                        JOptionPane.showMessageDialog(null, "Atualização do nome cancelada.", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                        repeat = false;
                    }
                }
                break;
            case 2: // 2 = CPF
                while (repeat) {
                    try {
                        attDado = JOptionPane.showInputDialog(null, "Insira o novo CPF para atualizar:\nAtenção: digite somente os números", "Atualizar CPF do paciente", JOptionPane.INFORMATION_MESSAGE);
                        for (int i = 0; i < attDado.length(); i++){
                            aux = String.valueOf(attDado.charAt(i));
                            if(isAlpha(aux)){
                                dadoCorreto = false;
                                break;
                            }
                        }
                        if (!dadoCorreto) {
                            JOptionPane.showMessageDialog(null, "CPF inválido!\nPor favor, digite somente números.", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                        } else if (attDado.length() != 11){
                            JOptionPane.showMessageDialog(null, "CPF inválido!\nPor favor, digite 11 números.", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                        } else {
                            if (dados.updateDadoPaciente(attDado, tipoColuna, Integer.parseInt(id_pesquisa))){
                                sucesso = true;
                                repeat = false;
                            }
                        }
                    } catch (SQLException ex) {
                        JOptionPane.showMessageDialog(null, "Erro ao consultar banco de dados: " + ex, "Aviso", JOptionPane.INFORMATION_MESSAGE);
                    } catch (NullPointerException ex) {
                        JOptionPane.showMessageDialog(null, "Atualização do CPF cancelada.", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                        repeat = false;
                    }
                    dadoCorreto = true;
                }
                break;
            case 3: // 3 = Data de nascimento
                while (repeat) {
                    try {
                        attDado = JOptionPane.showInputDialog(null, "Insira a nova data de nascimento para atualizar:\nAtenção: digite no seguinte formato dd//MM/yyyy", "Atualizar data de nascimento do paciente", JOptionPane.INFORMATION_MESSAGE);
                        for (int i = 0; i < attDado.length(); i++){
                            aux = String.valueOf(attDado.charAt(i));
                            if(isAlpha(aux)){
                                dadoCorreto = false;
                                JOptionPane.showMessageDialog(null, "Data inválida!\nDigite somente número.", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                                break;
                            }
                        }
                        if (attDado.charAt(2) == '/' && attDado.charAt(5) == '/' &&
                                Integer.parseInt(attDado.substring(0, 2)) > 0 && Integer.parseInt(attDado.substring(0, 2)) < 32 &&
                                Integer.parseInt(attDado.substring(3, 5)) > 0 && Integer.parseInt(attDado.substring(3, 5)) < 13 &&
                                Integer.parseInt(attDado.substring(6)) < 2020 && dadoCorreto){
                            if (dados.updateDadoPaciente(attDado, tipoColuna, Integer.parseInt(id_pesquisa))){
                                sucesso = true;
                                repeat = false;
                            }
                        } else {
                            if (dadoCorreto){
                                JOptionPane.showMessageDialog(null, "Data inválida!\nPor favor, verificar data inserida.", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                            }
                        }
                    } catch (SQLException ex) {
                        JOptionPane.showMessageDialog(null, "Erro ao consultar banco de dados: " + ex, "Aviso", JOptionPane.INFORMATION_MESSAGE);
                    } catch (NullPointerException ex) {
                        JOptionPane.showMessageDialog(null, "Atualização da data de nascimento cancelada.", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                        repeat = false;
                    }
                }
                break;
            case 4: // 4 = Sexo
                try {
                    opt = JOptionPane.showOptionDialog(null, "Insira o novo sexo para atualizar:", "Atualizar sexo do paciente", JOptionPane.DEFAULT_OPTION,  JOptionPane.INFORMATION_MESSAGE, null, sexoOpt, sexoOpt[3]);
                    switch (opt){
                        case 0:
                            attDado = "Feminino";
                            break;
                        case 1:
                            attDado = "Masculino";
                            break;
                        case 2:
                            attDado = "Outros";
                            break;
                        case 3:
                            JOptionPane.showMessageDialog(null, "Atualização do sexo cancelada.", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                            break;
                    }
                    if (!attDado.isEmpty()){
                        if (dados.updateDadoPaciente(attDado, tipoColuna, Integer.parseInt(id_pesquisa))){
                            sucesso = true;
                        }
                    }
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Erro ao consultar banco de dados: " + ex, "Aviso", JOptionPane.INFORMATION_MESSAGE);
                } catch (NullPointerException ex) {
                }
                break;
            case 5: // 5 = Telefone fixo
                while (repeat) {
                    try {
                        attDado = JOptionPane.showInputDialog(null, "Insira o novo telefone fixo para atualizar:\nAtenção: digite somente os números (10)", "Atualizar telefone fixo do paciente", JOptionPane.INFORMATION_MESSAGE);
                        for (int i = 0; i < attDado.length(); i++){
                            aux = String.valueOf(attDado.charAt(i));
                            if(isAlpha(aux)){
                                dadoCorreto = false;
                                break;
                            }
                        }
                        if (attDado.isEmpty()) {
                            if (dados.updateDadoPaciente(null, tipoColuna, Integer.parseInt(id_pesquisa))){
                                sucesso = true;
                                repeat = false;
                            }
                        } else if (!dadoCorreto) {
                            JOptionPane.showMessageDialog(null, "Número de telefone fixo inválido!\nPor favor, digite somente número.", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                        } else if (attDado.length() != 10) {
                            JOptionPane.showMessageDialog(null, "Número de telefone fixo inválido!\nPor favor, verifique o DDD e o número de telefone.", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                        } else {
                            if (dados.updateDadoPaciente(attDado, tipoColuna, Integer.parseInt(id_pesquisa))){
                                sucesso = true;
                                repeat = false;
                            }
                        }
                    } catch (SQLException ex) {
                        JOptionPane.showMessageDialog(null, "Erro ao consultar banco de dados: " + ex, "Aviso", JOptionPane.INFORMATION_MESSAGE);
                    } catch (NullPointerException ex) {
                        JOptionPane.showMessageDialog(null, "Atualização do telefone fixo cancelada.", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                        repeat = false;
                    }
                }
                break;
            case 6: // 6 = Celular
                while (repeat){
                    try {
                        attDado = JOptionPane.showInputDialog(null, "Insira o novo número de celular para atualizar:\nAtenção: digite somente os números (11)", "Atualizar número de celular do paciente", JOptionPane.INFORMATION_MESSAGE);
                        for (int i = 0; i < attDado.length(); i++){
                            aux = String.valueOf(attDado.charAt(i));
                            if(isAlpha(aux)){
                                dadoCorreto = false;
                                break;
                            }
                        }
                        if (!dadoCorreto) {
                            JOptionPane.showMessageDialog(null, "Número de celular inválido!\nPor favor, digite somente número.", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                        } else if (attDado.length() != 11) {
                            JOptionPane.showMessageDialog(null, "Número de celular inválido!\nPor favor, verifique o DDD e o número de celular.", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                        } else {
                            if (dados.updateDadoPaciente(attDado, tipoColuna, Integer.parseInt(id_pesquisa))){
                                sucesso = true;
                                repeat = false;
                            }
                        }
                    } catch (SQLException ex) {
                        JOptionPane.showMessageDialog(null, "Erro ao consultar banco de dados: " + ex, "Aviso", JOptionPane.INFORMATION_MESSAGE);
                    } catch (NullPointerException ex) {
                         JOptionPane.showMessageDialog(null, "Atualização do número celular cancelada.", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                         repeat = false;
                    }
                }
                break;
            case 7: // 7 = CEP
                while (repeat){
                    try {
                        attDado = JOptionPane.showInputDialog(null, "Insira o novo CEP para atualizar:\nAtenção: digite somente os números (8)", "Atualizar CEP do paciente", JOptionPane.INFORMATION_MESSAGE);
                        for (int i = 0; i < attDado.length(); i++){
                            aux = String.valueOf(attDado.charAt(i));
                            if(isAlpha(aux)){
                                dadoCorreto = false;
                                break;
                            }
                        }
                        if (!dadoCorreto) {
                            JOptionPane.showMessageDialog(null, "CEP inválido!\nPor favor, digite somente número.", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                        } else if (attDado.length() != 8) {
                                JOptionPane.showMessageDialog(null, "CEP inválido!\nPor favor, verifique o CEP e tente novamente.", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                        } else {
                            if (dados.updateDadoPaciente(attDado, tipoColuna, Integer.parseInt(id_pesquisa))){
                                sucesso = true;
                                repeat = false;
                            }
                        }
                    } catch (SQLException ex) {
                        JOptionPane.showMessageDialog(null, "Erro ao consultar banco de dados: " + ex, "Aviso", JOptionPane.INFORMATION_MESSAGE);
                    } catch (NullPointerException ex) {
                        JOptionPane.showMessageDialog(null, "Atualização do CEP cancelada.", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                        repeat = false;
                    }
                }
                break;
            case 8: // 8 = Plano de saúde
                try {
                    opt = JOptionPane.showOptionDialog(null, "Insira o novo plano de saúde para atualizar:", "Atualizar plano de saúde do paciente", JOptionPane.DEFAULT_OPTION,  JOptionPane.INFORMATION_MESSAGE, null, planoOp, planoOp[6]);
                    switch (opt){
                        case 0:
                            attDado = "Allianz";
                            break;
                        case 1:
                            attDado = "Amil";
                            break;
                        case 2:
                            attDado = "Porto Seguro";
                            break;
                        case 3:
                            attDado = "SulAmérica";
                            break;
                        case 4:
                            attDado = "Unimed";
                            break;
                        case 5:
                            attDado = "Não possui";
                            break;
                        case 6:
                            JOptionPane.showMessageDialog(null, "Atualização do plano de saúde cancelada.", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                        default:
                            break;
                    }
                    if (!attDado.isEmpty()){
                        if (dados.updateDadoPaciente(attDado, tipoColuna, Integer.parseInt(id_pesquisa))){
                            sucesso = true;
                        }
                    }
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Erro ao consultar banco de dados: " + ex, "Aviso", JOptionPane.INFORMATION_MESSAGE);
                } catch (NullPointerException ex) {
                }
                break;
            default:
                break;
        }
        if (sucesso) {
            try {
                atualizarTabelaPac();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "Erro ao atualizar tabela: " + ex);
            }
        }
    }

    private void atualizarDadoFunc() { // To do (URGÊNCIA)
        String id_pesquisa = null;
        try {
            id_pesquisa = String.valueOf(tabelaFunc.getValueAt(tabelaFunc.getSelectedRow(), 0));  
        } catch (ArrayIndexOutOfBoundsException ex) {
            JOptionPane.showMessageDialog(null, "Selecione o campo para atualizar", "Aviso", JOptionPane.INFORMATION_MESSAGE);
        }
        int tipoColuna = tabelaFunc.getSelectedColumn();
        int opt;
        String[] sexoOpt = {"Feminino", "Masculino", "Outros", "Cancelar"};
        Object[] cargoOpt = {"CEO", "Auxiliar de limpeza", "Cirurgiã (o)", "Controlador de ambulância", "Enfermeiro (a)", "Fisioterapeuta", "Médico (a)", "Nutricionista", "Psicólogo (a)", "Recepcionista", "Recrutador", "Residente (Estagiário)", "Vice-presidente", "Cancelar"};
        String[] turnoOpt = {"Matutino", "Noturno", "Integral", "Cancelar"};
        /*
        Indefinido
        CEO
        Auxiliar de limpeza
        Cirurgiã (o)
        Controlador de ambuância
        Enfermeiro (a)
        Fisioterapeuta
        Médico (a)
        Nutricionista
        Psicólogo (a)
        Recepcionista
        Recrutador
        Residente (Estagiário)
        Vice-presidente
        */
        String attDado = null;
        boolean sucesso = false;
        boolean repeat = true;
        boolean dadoCorreto = true;
        String aux;
        // 0 = ID
        // 1 = Nome
        // 2 = CPF
        // 3 = Data de nascimento
        // 4 = Sexo
        // 5 = Telefone fixo
        // 6 = Ramal
        // 7 = Celular
        // 8 = CEP
        // 9 = Cargo
        // 10 = Turno
        // 11 = Salário
        dadosDAO dados = new dadosDAO();
        switch (tipoColuna) {
            case 0: // 0 = ID
                JOptionPane.showMessageDialog(null, "O ID não pode ser alterado!", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                break;
            case 1: // 1 = Nome
                try {
                    attDado = JOptionPane.showInputDialog(null, "Insira o novo nome para atualizar:", "Atualizar nome do funcionário", JOptionPane.INFORMATION_MESSAGE);
                    for (int i = 0; i < attDado.length(); i++){
                        aux = String.valueOf(attDado.charAt(i));
                        if (isNumeric(aux)) {
                            dadoCorreto = false;
                            JOptionPane.showMessageDialog(null, "Sintaxe de nome inválida!\nPor favor, utilize somente letras.", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                        }
                    }
                    if (!attDado.isEmpty() && dadoCorreto){
                        attDado = attDado.toUpperCase();
                        if (dados.updateDadoFuncionario(attDado, tipoColuna, Integer.parseInt(id_pesquisa))){
                            sucesso = true;
                        }
                    }
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Erro ao consultar banco de dados: " + ex, "Aviso", JOptionPane.INFORMATION_MESSAGE);
                } catch (NullPointerException ex) {
                    JOptionPane.showMessageDialog(null, "Atualização do nome cancelada.", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                    repeat = false;
                }
                break;
            case 2: // 2 = CPF
                while (repeat) {
                    try {
                        attDado = JOptionPane.showInputDialog(null, "Insira o novo CPF para atualizar:\nAtenção: digite somente os números", "Atualizar CPF do funcionário", JOptionPane.INFORMATION_MESSAGE);
                        for (int i = 0; i < attDado.length(); i++){
                            aux = String.valueOf(attDado.charAt(i));
                            if(isAlpha(aux)){
                                dadoCorreto = false;
                                break;
                            }
                        }
                        if (!dadoCorreto) {
                            JOptionPane.showMessageDialog(null, "CPF inválido!\nPor favor, digite somente números.", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                        } else if (attDado.length() != 11){
                            JOptionPane.showMessageDialog(null, "CPF inválido!\nPor favor, digite 11 números.", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                        } else {
                            if (dados.updateDadoFuncionario(attDado, tipoColuna, Integer.parseInt(id_pesquisa))){
                                sucesso = true;
                                repeat = false;
                            }
                        }
                    } catch (SQLException ex) {
                        JOptionPane.showMessageDialog(null, "Erro ao consultar banco de dados: " + ex, "Aviso", JOptionPane.INFORMATION_MESSAGE);
                    } catch (NullPointerException ex) {
                        JOptionPane.showMessageDialog(null, "Atualização do CPF cancelada.", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                        repeat = false;
                    }
                    dadoCorreto = true;
                }
                break;
            case 3: // 3 = Data de nascimento
                while (repeat) {
                    try {
                        attDado = JOptionPane.showInputDialog(null, "Insira a nova data de nascimento para atualizar:\nAtenção: digite no seguinte formato dd//MM/yyyy", "Atualizar data de nascimento do funcionário", JOptionPane.INFORMATION_MESSAGE);
                        for (int i = 0; i < attDado.length(); i++){
                            aux = String.valueOf(attDado.charAt(i));
                            if(isAlpha(aux)){
                                dadoCorreto = false;
                                JOptionPane.showMessageDialog(null, "Data inválida!\nDigite somente número.", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                                break;
                            }
                        }
                        if (attDado.charAt(2) == '/' && attDado.charAt(5) == '/' &&
                                Integer.parseInt(attDado.substring(0, 2)) > 0 && Integer.parseInt(attDado.substring(0, 2)) < 32 &&
                                Integer.parseInt(attDado.substring(3, 5)) > 0 && Integer.parseInt(attDado.substring(3, 5)) < 13 &&
                                Integer.parseInt(attDado.substring(6)) < 2020 && dadoCorreto){
                            if (dados.updateDadoFuncionario(attDado, tipoColuna, Integer.parseInt(id_pesquisa))){
                                sucesso = true;
                                repeat = false;
                            }
                        } else {
                            if (dadoCorreto){
                                JOptionPane.showMessageDialog(null, "Data inválida!\nPor favor, verificar data inserida.", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                            }
                        }
                    } catch (SQLException ex) {
                        JOptionPane.showMessageDialog(null, "Erro ao consultar banco de dados: " + ex, "Aviso", JOptionPane.INFORMATION_MESSAGE);
                    } catch (NullPointerException ex) {
                        JOptionPane.showMessageDialog(null, "Atualização da data de nascimento cancelada.", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                        repeat = false;
                    }
                }
                break;
            case 4: // 4 = Sexo
                try {
                    opt = JOptionPane.showOptionDialog(null, "Insira o novo sexo para atualizar:", "Atualizar sexo do funcionário", JOptionPane.DEFAULT_OPTION,  JOptionPane.INFORMATION_MESSAGE, null, sexoOpt, sexoOpt[3]);
                    switch (opt){
                        case 0:
                            attDado = "Feminino";
                            break;
                        case 1:
                            attDado = "Masculino";
                            break;
                        case 2:
                            attDado = "Outros";
                            break;
                        case 3:
                            JOptionPane.showMessageDialog(null, "Atualização do sexo cancelada.", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                            break;
                    }
                    if (!attDado.isEmpty()){
                        if (dados.updateDadoFuncionario(attDado, tipoColuna, Integer.parseInt(id_pesquisa))){
                            sucesso = true;
                        }
                    }
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Erro ao consultar banco de dados: " + ex, "Aviso", JOptionPane.INFORMATION_MESSAGE);
                } catch (NullPointerException ex) {
                }
                break;
            case 5: // 5 = Telefone fixo
                while (repeat) {
                    try {
                        attDado = JOptionPane.showInputDialog(null, "Insira o novo telefone fixo para atualizar:\nAtenção: digite somente os números (10)", "Atualizar telefone fixo do funcionário", JOptionPane.INFORMATION_MESSAGE);
                        for (int i = 0; i < attDado.length(); i++){
                            aux = String.valueOf(attDado.charAt(i));
                            if(isAlpha(aux)){
                                dadoCorreto = false;
                                break;
                            }
                        }
                        if (attDado.isEmpty()) {
                            if (dados.updateDadoPaciente(null, tipoColuna, Integer.parseInt(id_pesquisa))){
                                sucesso = true;
                                repeat = false;
                            }
                        } else if (!dadoCorreto) {
                            JOptionPane.showMessageDialog(null, "Número de telefone fixo inválido!\nPor favor, digite somente número.", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                        } else if (attDado.length() != 10) {
                            JOptionPane.showMessageDialog(null, "Número de telefone fixo inválido!\nPor favor, verifique o DDD e o número de telefone.", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                        } else {
                            if (dados.updateDadoFuncionario(attDado, tipoColuna, Integer.parseInt(id_pesquisa))){
                                sucesso = true;
                                repeat = false;
                            }
                        }
                    } catch (SQLException ex) {
                        JOptionPane.showMessageDialog(null, "Erro ao consultar banco de dados: " + ex, "Aviso", JOptionPane.INFORMATION_MESSAGE);
                    } catch (NullPointerException ex) {
                        JOptionPane.showMessageDialog(null, "Atualização do telefone fixo cancelada.", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                        repeat = false;
                    }
                }
                break;
            case 6: // 6 = Ramal
                break;
            case 7: // 7 = Celular
                while (repeat){
                    try {
                        attDado = JOptionPane.showInputDialog(null, "Insira o novo número de celular para atualizar:\nAtenção: digite somente os números (11)", "Atualizar número de celular do funcionário", JOptionPane.INFORMATION_MESSAGE);
                        for (int i = 0; i < attDado.length(); i++){
                            aux = String.valueOf(attDado.charAt(i));
                            if(isAlpha(aux)){
                                dadoCorreto = false;
                                break;
                            }
                        }
                        if (!dadoCorreto) {
                            JOptionPane.showMessageDialog(null, "Número de celular inválido!\nPor favor, digite somente número.", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                        } else if (attDado.length() != 11) {
                            JOptionPane.showMessageDialog(null, "Número de celular inválido!\nPor favor, verifique o DDD e o número de celular.", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                        } else {
                            if (dados.updateDadoFuncionario(attDado, tipoColuna, Integer.parseInt(id_pesquisa))){
                                sucesso = true;
                                repeat = false;
                            }
                        }
                    } catch (SQLException ex) {
                        JOptionPane.showMessageDialog(null, "Erro ao consultar banco de dados: " + ex, "Aviso", JOptionPane.INFORMATION_MESSAGE);
                    } catch (NullPointerException ex) {
                         JOptionPane.showMessageDialog(null, "Atualização do número celular cancelada.", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                         repeat = false;
                    }
                }
                break;
            case 8: // 8 = CEP
                while (repeat){
                    try {
                        attDado = JOptionPane.showInputDialog(null, "Insira o novo CEP para atualizar:\nAtenção: digite somente os números (8)", "Atualizar CEP do funcionário", JOptionPane.INFORMATION_MESSAGE);
                        for (int i = 0; i < attDado.length(); i++){
                            aux = String.valueOf(attDado.charAt(i));
                            if(isAlpha(aux)){
                                dadoCorreto = false;
                                break;
                            }
                        }
                        if (!dadoCorreto) {
                            JOptionPane.showMessageDialog(null, "CEP inválido!\nPor favor, digite somente número.", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                        } else if (attDado.length() != 8) {
                                JOptionPane.showMessageDialog(null, "CEP inválido!\nPor favor, verifique o CEP e tente novamente.", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                        } else {
                            if (dados.updateDadoFuncionario(attDado, tipoColuna, Integer.parseInt(id_pesquisa))){
                                sucesso = true;
                                repeat = false;
                            }
                        }
                    } catch (SQLException ex) {
                        JOptionPane.showMessageDialog(null, "Erro ao consultar banco de dados: " + ex, "Aviso", JOptionPane.INFORMATION_MESSAGE);
                    } catch (NullPointerException ex) {
                        JOptionPane.showMessageDialog(null, "Atualização do CEP cancelada.", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                        repeat = false;
                    }
                }
                break;
            case 9: // 9 = Cargo
                try {
                    String opcao = (String) JOptionPane.showInputDialog(null, "Insira o novo cargo para atualizar:", "Atualizar cargo do funcionário", JOptionPane.PLAIN_MESSAGE, null, cargoOpt, "Cancelar");
                    //opt = JOptionPane.showOptionDialog(null, "Insira o novo cargo para atualizar:", "Atualizar cargo do funcionário", JOptionPane.DEFAULT_OPTION,  JOptionPane.INFORMATION_MESSAGE, null, cargoOpt, cargoOpt[13]);
                    switch (opcao){
                        /*
                        Indefinido
                        CEO
                        Auxiliar de limpeza
                        Cirurgiã (o)
                        Controlador de ambulância
                        Enfermeiro (a)
                        Fisioterapeuta
                        Médico (a)
                        Nutricionista
                        Psicólogo (a)
                        Recepcionista
                        Recrutador
                        Residente (Estagiário)
                        Vice-presidente
                        */
                        case "CEO":
                            attDado = "CEO";
                            break;
                        case "Auxiliar de limpeza":
                            attDado = "Auxiliar de limpeza";
                            break;
                        case "Cirurgiã (o)":
                            attDado = "Cirurgiã (o)";
                            break;
                        case "Controlador de ambulância":
                            attDado = "Controlador de ambulância";
                            break;
                        case "Enfermeiro (a)":
                            attDado = "Enfermeiro (a)";
                            break;
                        case "Fisioterapeuta":
                            attDado = "Fisioterapeuta";
                            break;
                        case "Médico (a)":
                            attDado = "Médico (a)";
                            break;
                        case "Nutricionista":
                            attDado = "Nutricionista";
                            break;
                        case "Psicólogo (a)":
                            attDado = "Psicólogo (a)";
                            break;
                        case "Recepcionista":
                            attDado = "Recepcionista";
                            break;
                        case "Recrutador":
                            attDado = "Recrutador";
                            break;
                        case "Residente (Estagiário)":
                            attDado = "Residente (Estagiário)";
                            break;
                        case "Vice-presidente":
                            attDado = "Vice-presidente";
                            break;
                        case "Cancelar":
                            attDado = "";
                            JOptionPane.showMessageDialog(null, "Atualização do cargo cancelada.", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                            break;
                    }
                    if (!attDado.isEmpty()){
                        if (dados.updateDadoFuncionario(attDado, tipoColuna, Integer.parseInt(id_pesquisa))){
                            sucesso = true;
                        }
                        switch (attDado) {
                            case "CEO":
                                attDado = "R$1.000.000,00";
                                break;
                            case "Auxiliar de limpeza":
                                attDado = "R$1.200,00";
                                break;
                            case "Cirurgiã (o)":
                                attDado = "R$20.000,00";
                                break;
                            case "Controlador de ambulância":
                                attDado = "R$3.000,00";
                                break;
                            case "Enfermeiro (a)":
                                attDado = "R$2.500,00";
                                break;
                            case "Fisioterapeuta":
                                attDado = "R$4.000,00";
                                break;
                            case "Médico (a)":
                                attDado = "R$15.000,00";
                                break;
                            case "Nutricionista":
                                attDado = "R$6.000,00";
                                break;
                            case "Psicólogo (a)":
                                attDado = "R$10.000,00";
                                break;
                            case "Recepcionista":
                                attDado = "R$1.250,00";
                                break;
                            case "Recrutador":
                                attDado = "R$2.269,22";
                                break;
                            case "Residente (Estagiário)":
                                attDado = "R$800,00";
                                break;
                            case "Vice-presidente":
                                attDado = "R$250.000,00";
                                break;
                            }
                        tipoColuna +=2;
                        System.out.println(tipoColuna);
                        dados.updateDadoFuncionario(attDado, tipoColuna, Integer.parseInt(id_pesquisa));
                        
                    }
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Erro ao consultar banco de dados: " + ex, "Aviso", JOptionPane.INFORMATION_MESSAGE);
                } catch (NullPointerException ex) {
                }
                break;
            case 10: // 10 = Turno
                try {
                    opt = JOptionPane.showOptionDialog(null, "Insira o novo turno para atualizar:", "Atualizar turno do funcionário", JOptionPane.DEFAULT_OPTION,  JOptionPane.INFORMATION_MESSAGE, null, turnoOpt, turnoOpt[3]);
                    switch (opt){
                        case 0:
                            attDado = "Matutino";
                            break;
                        case 1:
                            attDado = "Noturno";
                            break;
                        case 2:
                            attDado = "Integral";
                            break;
                        case 3:
                            JOptionPane.showMessageDialog(null, "Atualização do turno cancelada.", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                            break;
                    }
                    if (!attDado.isEmpty()){
                        if (dados.updateDadoFuncionario(attDado, tipoColuna, Integer.parseInt(id_pesquisa))){
                            sucesso = true;
                        }
                    }
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Erro ao consultar banco de dados: " + ex, "Aviso", JOptionPane.INFORMATION_MESSAGE);
                } catch (NullPointerException ex) {
                }
                break;
            case 11: // 11 = Salário
                JOptionPane.showMessageDialog(null, "O salário não pode ser alterado!", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                break;
                
        }
        if (sucesso) {
            JOptionPane.showMessageDialog(null, "Dado atualizado com sucesso!", "Aviso", JOptionPane.INFORMATION_MESSAGE);
            try {
                atualizarTabelaFunc();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "Erro ao atualizar tabela: " + ex);
            }
        }
    }

    private boolean isNumeric(String character) {
        try {
            Double.parseDouble(character);
            return true;
        } catch (NumberFormatException ex) {
            System.out.println("Erro: " + ex);
        }
        return false;
    }

    private boolean isAlpha(String aux) {
        try {
            Double.parseDouble(aux);
            return false;
        } catch (NumberFormatException ex) {
            System.out.println("Erro: " + ex);
        }
        return true;
    }

    private boolean enterKey(KeyEvent evt) {
        if (evt.getKeyCode() == KeyEvent.VK_ENTER){
            return true;
        } else {
            return false;
        }
    }
}
